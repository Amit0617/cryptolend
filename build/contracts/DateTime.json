{
  "contractName": "DateTime",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.5.0+commit.1d4f565a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/d/finocial.eth/contracts/libs/DateTime/DateTime.sol\":\"DateTime\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/d/finocial.eth/contracts/libs/DateTime/DateTime.sol\":{\"keccak256\":\"0x3d4ba93f9bac80f5b81de83934780668824f92ff84765f21874fbb9694df1b86\",\"urls\":[\"bzzr://aad5aaf2c7866decb9e97446242223ca9a4213747324677d3bc62942087d1d04\"]}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50603580601d6000396000f3fe6080604052600080fdfea165627a7a72305820d4a5271e049ee2850f5a6aa19dfff738f5b30206b086fba370853ba9f9b890730029",
  "deployedBytecode": "0x6080604052600080fdfea165627a7a72305820d4a5271e049ee2850f5a6aa19dfff738f5b30206b086fba370853ba9f9b890730029",
  "sourceMap": "79:8454:5:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;79:8454:5;;;;;;;",
  "deployedSourceMap": "79:8454:5:-;;;;;",
  "source": "// https://github.com/pipermerriam/ethereum-datetime\n\npragma solidity ^0.5.0;\n\ncontract DateTime {\n        /*\n         *  Date and Time utilities for ethereum contracts\n         *\n         */\n        // struct _DateTime {\n        //         uint16 year;\n        //         uint8 month;\n        //         uint8 day;\n        //         uint8 hour;\n        //         uint8 minute;\n        //         uint8 second;\n        //         uint8 weekday;\n        // }\n        //\n        // uint constant DAY_IN_SECONDS = 86400;\n        // uint constant YEAR_IN_SECONDS = 31536000;\n        // uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n        //\n        // uint constant HOUR_IN_SECONDS = 3600;\n        // uint constant MINUTE_IN_SECONDS = 60;\n        //\n        // uint16 constant ORIGIN_YEAR = 1970;\n        //\n        // function isLeapYear(uint16 year) public pure returns (bool) {\n        //         if (year % 4 != 0) {\n        //                 return false;\n        //         }\n        //         if (year % 100 != 0) {\n        //                 return true;\n        //         }\n        //         if (year % 400 != 0) {\n        //                 return false;\n        //         }\n        //         return true;\n        // }\n        //\n        // function leapYearsBefore(uint year) public pure returns (uint) {\n        //         year -= 1;\n        //         return year / 4 - year / 100 + year / 400;\n        // }\n        //\n        // function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\n        //         if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        //                 return 31;\n        //         }\n        //         else if (month == 4 || month == 6 || month == 9 || month == 11) {\n        //                 return 30;\n        //         }\n        //         else if (isLeapYear(year)) {\n        //                 return 29;\n        //         }\n        //         else {\n        //                 return 28;\n        //         }\n        // }\n        //\n        // function parseTimestamp(uint timestamp) internal pure returns (_DateTime dt) {\n        //         uint secondsAccountedFor = 0;\n        //         uint buf;\n        //         uint8 i;\n        //\n        //         // Year\n        //         dt.year = getYear(timestamp);\n        //         buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n        //\n        //         secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n        //         secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n        //\n        //         // Month\n        //         uint secondsInMonth;\n        //         for (i = 1; i <= 12; i++) {\n        //                 secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n        //                 if (secondsInMonth + secondsAccountedFor > timestamp) {\n        //                         dt.month = i;\n        //                         break;\n        //                 }\n        //                 secondsAccountedFor += secondsInMonth;\n        //         }\n        //\n        //         // Day\n        //         for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n        //                 if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n        //                         dt.day = i;\n        //                         break;\n        //                 }\n        //                 secondsAccountedFor += DAY_IN_SECONDS;\n        //         }\n        //\n        //         // Hour\n        //         dt.hour = getHour(timestamp);\n        //\n        //         // Minute\n        //         dt.minute = getMinute(timestamp);\n        //\n        //         // Second\n        //         dt.second = getSecond(timestamp);\n        //\n        //         // Day of week.\n        //         dt.weekday = getWeekday(timestamp);\n        // }\n        //\n        // function getYear(uint timestamp) public pure returns (uint16) {\n        //         uint secondsAccountedFor = 0;\n        //         uint16 year;\n        //         uint numLeapYears;\n        //\n        //         // Year\n        //         year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n        //         numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n        //\n        //         secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n        //         secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n        //\n        //         while (secondsAccountedFor > timestamp) {\n        //                 if (isLeapYear(uint16(year - 1))) {\n        //                         secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n        //                 }\n        //                 else {\n        //                         secondsAccountedFor -= YEAR_IN_SECONDS;\n        //                 }\n        //                 year -= 1;\n        //         }\n        //         return year;\n        // }\n        //\n        // function getMonth(uint timestamp) public pure returns (uint8) {\n        //         return parseTimestamp(timestamp).month;\n        // }\n        //\n        // function getDay(uint timestamp) public pure returns (uint8) {\n        //         return parseTimestamp(timestamp).day;\n        // }\n        //\n        // function getHour(uint timestamp) public pure returns (uint8) {\n        //         return uint8((timestamp / 60 / 60) % 24);\n        // }\n        //\n        // function getMinute(uint timestamp) public pure returns (uint8) {\n        //         return uint8((timestamp / 60) % 60);\n        // }\n        //\n        // function getSecond(uint timestamp) public pure returns (uint8) {\n        //         return uint8(timestamp % 60);\n        // }\n        //\n        // function getWeekday(uint timestamp) public pure returns (uint8) {\n        //         return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n        // }\n        //\n        // function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {\n        //         return toTimestamp(year, month, day, 0, 0, 0);\n        // }\n        //\n        // function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public pure returns (uint timestamp) {\n        //         return toTimestamp(year, month, day, hour, 0, 0);\n        // }\n        //\n        // function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint timestamp) {\n        //         return toTimestamp(year, month, day, hour, minute, 0);\n        // }\n        //\n        // function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {\n        //         uint16 i;\n        //\n        //         // Year\n        //         for (i = ORIGIN_YEAR; i < year; i++) {\n        //                 if (isLeapYear(i)) {\n        //                         timestamp += LEAP_YEAR_IN_SECONDS;\n        //                 }\n        //                 else {\n        //                         timestamp += YEAR_IN_SECONDS;\n        //                 }\n        //         }\n        //\n        //         // Month\n        //         uint8[12] memory monthDayCounts;\n        //         monthDayCounts[0] = 31;\n        //         if (isLeapYear(year)) {\n        //                 monthDayCounts[1] = 29;\n        //         }\n        //         else {\n        //                 monthDayCounts[1] = 28;\n        //         }\n        //         monthDayCounts[2] = 31;\n        //         monthDayCounts[3] = 30;\n        //         monthDayCounts[4] = 31;\n        //         monthDayCounts[5] = 30;\n        //         monthDayCounts[6] = 31;\n        //         monthDayCounts[7] = 31;\n        //         monthDayCounts[8] = 30;\n        //         monthDayCounts[9] = 31;\n        //         monthDayCounts[10] = 30;\n        //         monthDayCounts[11] = 31;\n        //\n        //         for (i = 1; i < month; i++) {\n        //                 timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n        //         }\n        //\n        //         // Day\n        //         timestamp += DAY_IN_SECONDS * (day - 1);\n        //\n        //         // Hour\n        //         timestamp += HOUR_IN_SECONDS * (hour);\n        //\n        //         // Minute\n        //         timestamp += MINUTE_IN_SECONDS * (minute);\n        //\n        //         // Second\n        //         timestamp += second;\n        //\n        //         return timestamp;\n        // }\n}\n",
  "sourcePath": "/home/d/finocial.eth/contracts/libs/DateTime/DateTime.sol",
  "ast": {
    "absolutePath": "/home/d/finocial.eth/contracts/libs/DateTime/DateTime.sol",
    "exportedSymbols": {
      "DateTime": [
        1344
      ]
    },
    "id": 1345,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1343,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "54:23:5"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1344,
        "linearizedBaseContracts": [
          1344
        ],
        "name": "DateTime",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 1345,
        "src": "79:8454:5"
      }
    ],
    "src": "54:8480:5"
  },
  "legacyAST": {
    "absolutePath": "/home/d/finocial.eth/contracts/libs/DateTime/DateTime.sol",
    "exportedSymbols": {
      "DateTime": [
        1344
      ]
    },
    "id": 1345,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1343,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "54:23:5"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 1344,
        "linearizedBaseContracts": [
          1344
        ],
        "name": "DateTime",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 1345,
        "src": "79:8454:5"
      }
    ],
    "src": "54:8480:5"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-08-07T10:00:43.882Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}